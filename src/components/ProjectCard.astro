---
interface Props {
  title: string;
  description: string;
  image: string;
  tags: string[];
  link?: string;
}

const { title, description, image, tags, link } = Astro.props;
---

<div
  class="bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-[1.01] border border-gray-100 dark:border-gray-700 flex flex-col h-full"
>
  <div class="relative h-48 overflow-hidden">
    <img
      src={image || '/placeholder.svg'}
      alt={title}
      class="w-full h-full object-cover"
    />
  </div>

  <div class="p-6 flex flex-col flex-grow">
    <h3
      class="text-xl font-heading font-semibold mb-2 text-gray-900 dark:text-white"
    >
      {title}
    </h3>

    <p class="text-gray-600 dark:text-gray-300 mb-4 flex-grow">{description}</p>

    <div class="flex flex-wrap gap-2 mb-4">
      {
        tags.map((tag) => (
          <span class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-full">
            {tag}
          </span>
        ))
      }
    </div>

    {
      link && (
        <a
          href={link}
          target="_blank"
          rel="noopener noreferrer"
          class="text-accent font-medium hover:underline mt-auto inline-flex items-center"
        >
          Ver Proyecto
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 ml-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M14 5l7 7m0 0l-7 7m7-7H3"
            />
          </svg>
        </a>
      )
    }
  </div>
</div>
